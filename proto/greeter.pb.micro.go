// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: greeter.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Cinema service

type CinemaService interface {
	AddCinema(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*Response, error)
	DeleteCinema(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*Response, error)
	GetCinemas(ctx context.Context, in *Request, opts ...client.CallOption) (*CinemaResponse, error)
}

type cinemaService struct {
	c    client.Client
	name string
}

func NewCinemaService(name string, c client.Client) CinemaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &cinemaService{
		c:    c,
		name: name,
	}
}

func (c *cinemaService) AddCinema(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Cinema.AddCinema", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) DeleteCinema(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Cinema.DeleteCinema", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) GetCinemas(ctx context.Context, in *Request, opts ...client.CallOption) (*CinemaResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.GetCinemas", in)
	out := new(CinemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cinema service

type CinemaHandler interface {
	AddCinema(context.Context, *CinemaRequest, *Response) error
	DeleteCinema(context.Context, *CinemaRequest, *Response) error
	GetCinemas(context.Context, *Request, *CinemaResponse) error
}

func RegisterCinemaHandler(s server.Server, hdlr CinemaHandler, opts ...server.HandlerOption) error {
	type cinema interface {
		AddCinema(ctx context.Context, in *CinemaRequest, out *Response) error
		DeleteCinema(ctx context.Context, in *CinemaRequest, out *Response) error
		GetCinemas(ctx context.Context, in *Request, out *CinemaResponse) error
	}
	type Cinema struct {
		cinema
	}
	h := &cinemaHandler{hdlr}
	return s.Handle(s.NewHandler(&Cinema{h}, opts...))
}

type cinemaHandler struct {
	CinemaHandler
}

func (h *cinemaHandler) AddCinema(ctx context.Context, in *CinemaRequest, out *Response) error {
	return h.CinemaHandler.AddCinema(ctx, in, out)
}

func (h *cinemaHandler) DeleteCinema(ctx context.Context, in *CinemaRequest, out *Response) error {
	return h.CinemaHandler.DeleteCinema(ctx, in, out)
}

func (h *cinemaHandler) GetCinemas(ctx context.Context, in *Request, out *CinemaResponse) error {
	return h.CinemaHandler.GetCinemas(ctx, in, out)
}

// Client API for Movie service

type MovieService interface {
	AddMovie(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*Response, error)
	DeleteMovie(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*Response, error)
	GetMovies(ctx context.Context, in *Request, opts ...client.CallOption) (*MovieResponse, error)
}

type movieService struct {
	c    client.Client
	name string
}

func NewMovieService(name string, c client.Client) MovieService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &movieService{
		c:    c,
		name: name,
	}
}

func (c *movieService) AddMovie(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Movie.AddMovie", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieService) DeleteMovie(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Movie.DeleteMovie", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieService) GetMovies(ctx context.Context, in *Request, opts ...client.CallOption) (*MovieResponse, error) {
	req := c.c.NewRequest(c.name, "Movie.GetMovies", in)
	out := new(MovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Movie service

type MovieHandler interface {
	AddMovie(context.Context, *MovieRequest, *Response) error
	DeleteMovie(context.Context, *MovieRequest, *Response) error
	GetMovies(context.Context, *Request, *MovieResponse) error
}

func RegisterMovieHandler(s server.Server, hdlr MovieHandler, opts ...server.HandlerOption) error {
	type movie interface {
		AddMovie(ctx context.Context, in *MovieRequest, out *Response) error
		DeleteMovie(ctx context.Context, in *MovieRequest, out *Response) error
		GetMovies(ctx context.Context, in *Request, out *MovieResponse) error
	}
	type Movie struct {
		movie
	}
	h := &movieHandler{hdlr}
	return s.Handle(s.NewHandler(&Movie{h}, opts...))
}

type movieHandler struct {
	MovieHandler
}

func (h *movieHandler) AddMovie(ctx context.Context, in *MovieRequest, out *Response) error {
	return h.MovieHandler.AddMovie(ctx, in, out)
}

func (h *movieHandler) DeleteMovie(ctx context.Context, in *MovieRequest, out *Response) error {
	return h.MovieHandler.DeleteMovie(ctx, in, out)
}

func (h *movieHandler) GetMovies(ctx context.Context, in *Request, out *MovieResponse) error {
	return h.MovieHandler.GetMovies(ctx, in, out)
}

// Client API for Reservation service

type ReservationService interface {
	MakeReservation(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*Response, error)
	DeleteReservation(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*Response, error)
	CheckReservation(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*Response, error)
	GetReservations(ctx context.Context, in *Request, opts ...client.CallOption) (*ReservationResponse, error)
}

type reservationService struct {
	c    client.Client
	name string
}

func NewReservationService(name string, c client.Client) ReservationService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &reservationService{
		c:    c,
		name: name,
	}
}

func (c *reservationService) MakeReservation(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Reservation.MakeReservation", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) DeleteReservation(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Reservation.DeleteReservation", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) CheckReservation(ctx context.Context, in *ReservationRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Reservation.CheckReservation", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationService) GetReservations(ctx context.Context, in *Request, opts ...client.CallOption) (*ReservationResponse, error) {
	req := c.c.NewRequest(c.name, "Reservation.GetReservations", in)
	out := new(ReservationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Reservation service

type ReservationHandler interface {
	MakeReservation(context.Context, *ReservationRequest, *Response) error
	DeleteReservation(context.Context, *ReservationRequest, *Response) error
	CheckReservation(context.Context, *ReservationRequest, *Response) error
	GetReservations(context.Context, *Request, *ReservationResponse) error
}

func RegisterReservationHandler(s server.Server, hdlr ReservationHandler, opts ...server.HandlerOption) error {
	type reservation interface {
		MakeReservation(ctx context.Context, in *ReservationRequest, out *Response) error
		DeleteReservation(ctx context.Context, in *ReservationRequest, out *Response) error
		CheckReservation(ctx context.Context, in *ReservationRequest, out *Response) error
		GetReservations(ctx context.Context, in *Request, out *ReservationResponse) error
	}
	type Reservation struct {
		reservation
	}
	h := &reservationHandler{hdlr}
	return s.Handle(s.NewHandler(&Reservation{h}, opts...))
}

type reservationHandler struct {
	ReservationHandler
}

func (h *reservationHandler) MakeReservation(ctx context.Context, in *ReservationRequest, out *Response) error {
	return h.ReservationHandler.MakeReservation(ctx, in, out)
}

func (h *reservationHandler) DeleteReservation(ctx context.Context, in *ReservationRequest, out *Response) error {
	return h.ReservationHandler.DeleteReservation(ctx, in, out)
}

func (h *reservationHandler) CheckReservation(ctx context.Context, in *ReservationRequest, out *Response) error {
	return h.ReservationHandler.CheckReservation(ctx, in, out)
}

func (h *reservationHandler) GetReservations(ctx context.Context, in *Request, out *ReservationResponse) error {
	return h.ReservationHandler.GetReservations(ctx, in, out)
}

// Client API for Show service

type ShowService interface {
	AddShow(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*Response, error)
	DeleteShow(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*Response, error)
	GetShows(ctx context.Context, in *Request, opts ...client.CallOption) (*ShowResponse, error)
}

type showService struct {
	c    client.Client
	name string
}

func NewShowService(name string, c client.Client) ShowService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &showService{
		c:    c,
		name: name,
	}
}

func (c *showService) AddShow(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Show.AddShow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) DeleteShow(ctx context.Context, in *ShowRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Show.DeleteShow", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *showService) GetShows(ctx context.Context, in *Request, opts ...client.CallOption) (*ShowResponse, error) {
	req := c.c.NewRequest(c.name, "Show.GetShows", in)
	out := new(ShowResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Show service

type ShowHandler interface {
	AddShow(context.Context, *ShowRequest, *Response) error
	DeleteShow(context.Context, *ShowRequest, *Response) error
	GetShows(context.Context, *Request, *ShowResponse) error
}

func RegisterShowHandler(s server.Server, hdlr ShowHandler, opts ...server.HandlerOption) error {
	type show interface {
		AddShow(ctx context.Context, in *ShowRequest, out *Response) error
		DeleteShow(ctx context.Context, in *ShowRequest, out *Response) error
		GetShows(ctx context.Context, in *Request, out *ShowResponse) error
	}
	type Show struct {
		show
	}
	h := &showHandler{hdlr}
	return s.Handle(s.NewHandler(&Show{h}, opts...))
}

type showHandler struct {
	ShowHandler
}

func (h *showHandler) AddShow(ctx context.Context, in *ShowRequest, out *Response) error {
	return h.ShowHandler.AddShow(ctx, in, out)
}

func (h *showHandler) DeleteShow(ctx context.Context, in *ShowRequest, out *Response) error {
	return h.ShowHandler.DeleteShow(ctx, in, out)
}

func (h *showHandler) GetShows(ctx context.Context, in *Request, out *ShowResponse) error {
	return h.ShowHandler.GetShows(ctx, in, out)
}

// Client API for User service

type UserService interface {
	AddUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*Response, error)
	DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*Response, error)
	GetUsers(ctx context.Context, in *Request, opts ...client.CallOption) (*UserResponse, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) AddUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.AddUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) DeleteUser(ctx context.Context, in *UserRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.DeleteUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUsers(ctx context.Context, in *Request, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetUsers", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	AddUser(context.Context, *UserRequest, *Response) error
	DeleteUser(context.Context, *UserRequest, *Response) error
	GetUsers(context.Context, *Request, *UserResponse) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		AddUser(ctx context.Context, in *UserRequest, out *Response) error
		DeleteUser(ctx context.Context, in *UserRequest, out *Response) error
		GetUsers(ctx context.Context, in *Request, out *UserResponse) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) AddUser(ctx context.Context, in *UserRequest, out *Response) error {
	return h.UserHandler.AddUser(ctx, in, out)
}

func (h *userHandler) DeleteUser(ctx context.Context, in *UserRequest, out *Response) error {
	return h.UserHandler.DeleteUser(ctx, in, out)
}

func (h *userHandler) GetUsers(ctx context.Context, in *Request, out *UserResponse) error {
	return h.UserHandler.GetUsers(ctx, in, out)
}
