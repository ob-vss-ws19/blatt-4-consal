// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: greeter.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Cinema service

type CinemaService interface {
	AddCinema(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*CinemaResponse, error)
	DeleteCinema(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*CinemaResponse, error)
}

type cinemaService struct {
	c    client.Client
	name string
}

func NewCinemaService(name string, c client.Client) CinemaService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &cinemaService{
		c:    c,
		name: name,
	}
}

func (c *cinemaService) AddCinema(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*CinemaResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.AddCinema", in)
	out := new(CinemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cinemaService) DeleteCinema(ctx context.Context, in *CinemaRequest, opts ...client.CallOption) (*CinemaResponse, error) {
	req := c.c.NewRequest(c.name, "Cinema.DeleteCinema", in)
	out := new(CinemaResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Cinema service

type CinemaHandler interface {
	AddCinema(context.Context, *CinemaRequest, *CinemaResponse) error
	DeleteCinema(context.Context, *CinemaRequest, *CinemaResponse) error
}

func RegisterCinemaHandler(s server.Server, hdlr CinemaHandler, opts ...server.HandlerOption) error {
	type cinema interface {
		AddCinema(ctx context.Context, in *CinemaRequest, out *CinemaResponse) error
		DeleteCinema(ctx context.Context, in *CinemaRequest, out *CinemaResponse) error
	}
	type Cinema struct {
		cinema
	}
	h := &cinemaHandler{hdlr}
	return s.Handle(s.NewHandler(&Cinema{h}, opts...))
}

type cinemaHandler struct {
	CinemaHandler
}

func (h *cinemaHandler) AddCinema(ctx context.Context, in *CinemaRequest, out *CinemaResponse) error {
	return h.CinemaHandler.AddCinema(ctx, in, out)
}

func (h *cinemaHandler) DeleteCinema(ctx context.Context, in *CinemaRequest, out *CinemaResponse) error {
	return h.CinemaHandler.DeleteCinema(ctx, in, out)
}

// Client API for Movie service

type MovieService interface {
	AddMovie(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*MovieResponse, error)
	DeleteMovie(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*MovieResponse, error)
}

type movieService struct {
	c    client.Client
	name string
}

func NewMovieService(name string, c client.Client) MovieService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "proto"
	}
	return &movieService{
		c:    c,
		name: name,
	}
}

func (c *movieService) AddMovie(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*MovieResponse, error) {
	req := c.c.NewRequest(c.name, "Movie.AddMovie", in)
	out := new(MovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieService) DeleteMovie(ctx context.Context, in *MovieRequest, opts ...client.CallOption) (*MovieResponse, error) {
	req := c.c.NewRequest(c.name, "Movie.DeleteMovie", in)
	out := new(MovieResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Movie service

type MovieHandler interface {
	AddMovie(context.Context, *MovieRequest, *MovieResponse) error
	DeleteMovie(context.Context, *MovieRequest, *MovieResponse) error
}

func RegisterMovieHandler(s server.Server, hdlr MovieHandler, opts ...server.HandlerOption) error {
	type movie interface {
		AddMovie(ctx context.Context, in *MovieRequest, out *MovieResponse) error
		DeleteMovie(ctx context.Context, in *MovieRequest, out *MovieResponse) error
	}
	type Movie struct {
		movie
	}
	h := &movieHandler{hdlr}
	return s.Handle(s.NewHandler(&Movie{h}, opts...))
}

type movieHandler struct {
	MovieHandler
}

func (h *movieHandler) AddMovie(ctx context.Context, in *MovieRequest, out *MovieResponse) error {
	return h.MovieHandler.AddMovie(ctx, in, out)
}

func (h *movieHandler) DeleteMovie(ctx context.Context, in *MovieRequest, out *MovieResponse) error {
	return h.MovieHandler.DeleteMovie(ctx, in, out)
}
